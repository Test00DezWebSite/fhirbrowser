// Generated by CoffeeScript 1.6.3
(function() {
  Ext.define('FhirBrowser.proxy.JsonAjax', {
    extend: 'Ext.data.proxy.Ajax',
    alias: 'proxy.jsonajax',
    buildUrl: function(request) {
      var node, nodeType;
      node = request.operation.node;
      nodeType = node.get('type') || 'root';
      if (nodeType === "Resource") {
        nodeType = request.operation.node.get('name');
      }
      request.url = "" + request.proxy.url + "/" + nodeType + ".json";
      return this.callParent(arguments);
    }
  });

  Ext.define('FhirBrowser.model.FhirType', {
    extend: 'Ext.data.Model',
    fields: [
      'leaf', 'short', 'formal', 'reference', 'extendable', 'type', 'name', 'path', {
        name: 'qtip',
        mapping: 'short'
      }, {
        name: 'count',
        convert: function(v, record) {
          if (record.raw.min === void 0) {
            return null;
          }
          return "" + record.raw.min + ".." + record.raw.max;
        }
      }, {
        name: 'valueset',
        convert: function(v, record) {
          var text, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7;
          text = ((_ref = record.raw) != null ? (_ref1 = _ref.binding) != null ? _ref1.name : void 0 : void 0) || null;
          if (((_ref2 = record.raw) != null ? (_ref3 = _ref2.binding) != null ? _ref3.conformance : void 0 : void 0) === 'required') {
            return text += " (required)";
          } else if (((_ref4 = record.raw) != null ? (_ref5 = _ref4.binding) != null ? _ref5.conformance : void 0 : void 0) === 'preferred') {
            return text += " (preferred)";
          } else if (((_ref6 = record.raw) != null ? (_ref7 = _ref6.binding) != null ? _ref7.conformance : void 0 : void 0) === 'example') {
            return text += " (example)";
          }
        }
      }, {
        name: 'valuesetLink',
        convert: function(v, record) {
          var _ref, _ref1, _ref2, _ref3, _ref4;
          return ((_ref = record.raw) != null ? (_ref1 = _ref.binding) != null ? _ref1.referenceUri : void 0 : void 0) || ((_ref2 = record.raw) != null ? (_ref3 = _ref2.binding) != null ? (_ref4 = _ref3.referenceResource) != null ? _ref4.reference : void 0 : void 0 : void 0);
        }
      }, {
        name: 'referenceLink',
        convert: function(v, record) {
          if (record.raw.reference) {
            return "http://www.hl7.org/implement/standards/fhir/" + record.raw.reference + ".html";
          }
        }
      }, {
        name: 'typeLink',
        convert: function(v, record) {
          var base;
          base = "http://www.hl7.org/implement/standards/fhir/";
          if (!record.raw.parent) {
            return base + record.raw.name + ".html";
          } else if (record.raw.type === 'Resource') {
            return base + "references.html#contained";
          } else if (record.raw.type === 'ResourceReference') {
            return base + "references.html#ResourceReference";
          } else if (record.raw.type === "Narrative") {
            return base + "narrative.html";
          } else if (record.raw.type === "none") {
            return null;
          } else if (record.raw.type !== 'multitype') {
            return base + "datatypes.html#" + record.raw.type;
          } else {
            return null;
          }
        }
      }
    ]
  });

  Ext.define('FhirBrowser.store.FhirTypeStore', {
    requires: ['FhirBrowser.proxy.JsonAjax'],
    extend: 'Ext.data.TreeStore',
    model: 'FhirBrowser.model.FhirType',
    autoLoad: true,
    proxy: {
      type: 'jsonajax',
      url: AppGlobals.dataPath
    }
  });

  Ext.define('FhirBrowser.view.TreeMenu', {
    extend: 'Ext.menu.Menu',
    items: [
      {
        text: 'Expand Resources'
      }, {
        text: 'Collapse All'
      }, {
        xtype: 'menuseparator'
      }, {
        text: 'About'
      }
    ]
  });

  Ext.define('FhirBrowser.view.ResourceTree', {
    extend: 'Ext.tree.Panel',
    xtype: 'resourcetree',
    useArrows: true,
    title: "FHIR Resource Browser",
    store: 'FhirBrowser.store.FhirTypeStore',
    rootVisible: false,
    tools: [
      {
        type: 'gear'
      }
    ],
    columns: {
      items: [
        {
          text: "Name",
          dataIndex: "name",
          xtype: "treecolumn",
          sortable: false,
          hideable: false,
          flex: 2
        }, {
          text: "Type",
          dataIndex: "type",
          flex: 1,
          sortable: false,
          renderer: function(value, meta, record) {
            var reference;
            if (value === "multitype") {
              return "Choose One";
            } else if ((reference = record.get("reference"))) {
              return "Ref To: " + reference;
            } else {
              return value;
            }
          }
        }, {
          text: "Count",
          dataIndex: "count",
          sortable: false,
          align: 'center'
        }, {
          text: "ValueSet",
          dataIndex: "valueset",
          sortable: false,
          flex: 1
        }
      ]
    }
  });

  Ext.define('FhirBrowser.view.Viewport', {
    extend: 'Ext.container.Viewport',
    requires: ['Ext.layout.container.Border', 'FhirBrowser.view.ResourceTree', 'FhirBrowser.view.TreeMenu'],
    layout: 'border',
    items: [
      {
        title: 'FHIR Resource Browser',
        xtype: 'resourcetree',
        region: 'center',
        id: 'resource-tree',
        flex: 2
      }, {
        xtype: 'panel',
        region: 'south',
        title: 'Resource Detail',
        id: 'detail-panel',
        split: true,
        collapsible: true,
        bodyPadding: "0 10 0 10",
        flex: 1,
        tpl: ['<p><b>Type:</b> <tpl if="type === \'multitype\'">', 'Choice | ', '<tpl elseif="type === \'none\'">', 'NA | ', '<tpl else>', '<a href="{typeLink}" target="_blank">{type}</a> | ', '</tpl>', '<tpl if="reference">', '<b>Target:</b> <a href="{referenceLink}" target="_blank">{reference}</a> (<a id="show-resource" href="#">Show</a>) | ', '</tpl>', '<b>Count:</b> {count} | <b>Extendable:</b> ', '<tpl if="extendable">Yes<tpl else>No</tpl>', '</p>', '<tpl if="valueset"><p><b>Value Set:</b> ', '<a href="{valuesetLink}" target="_blank">{valueset}</a></p></tpl>', '<p><b>Short Description:</b><br />{short}</p>', '<p><b>Full Description:</b><br />{formal}</p>'],
        html: "<p>Select an item from the list to get started</p>"
      }
    ]
  });

  Ext.application({
    name: 'FhirBrowser',
    requires: ['Ext.ComponentQuery'],
    views: ['FhirBrowser.view.Viewport'],
    models: ['FhirBrowser.model.FhirType'],
    stores: ['FhirBrowser.store.FhirTypeStore'],
    autoCreateViewport: true,
    aboutTarget: 'http://www.google.com',
    launch: function() {
      var panel, tree, treeMenu;
      this.hideMask();
      tree = Ext.getCmp('resource-tree');
      tree.on('select', this.onSelect, this);
      treeMenu = Ext.create('FhirBrowser.view.TreeMenu');
      treeMenu.on('click', this.onMenuItem, this);
      tree.down('tool').on('click', function(gear) {
        return treeMenu.showBy(gear);
      });
      panel = Ext.getCmp('detail-panel');
      return panel.body.on('click', function(e) {
        if (e.target && e.target.id === 'show-resource') {
          return this.jumpToReference();
        }
      }, this);
    },
    onMenuItem: function(menu, item) {
      var tree;
      tree = Ext.getCmp('resource-tree');
      if (item.text === 'Expand Resources') {
        return tree.getRootNode().expandChildren();
      } else if (item.text === 'Collapse All') {
        return tree.getRootNode().eachChild(function(node) {
          return node.collapse(true);
        });
      } else if (item.text === 'About') {
        return window.open(FhirBrowser.app.aboutTarget, '_blank');
      }
    },
    onSelect: function(treepanel, record, index) {
      var appendix, currentNode, panel, path, skipInPath;
      if (record.getDepth() === 1) {
        return;
      }
      currentNode = record;
      path = [];
      while (currentNode.parentNode.parentNode) {
        skipInPath = (currentNode.get("type") === "multitype" && currentNode.getChildAt(0).get("type") !== 'ResourceReference') || (currentNode.parentNode.get("type") === "multitype" && currentNode.get("type") === 'ResourceReference');
        if (!skipInPath) {
          appendix = currentNode.raw.max === '*' ? "[]" : "";
          path.unshift(currentNode.get('name') + appendix);
        }
        currentNode = currentNode.parentNode;
      }
      if (!record.get('leaf')) {
        path.push("+");
      }
      panel = Ext.getCmp('detail-panel');
      panel.setTitle(path.join('.'));
      return panel.update(record.getData());
    },
    jumpToReference: function() {
      var currentNode, ref, refFinder, target, tree, _ref;
      tree = Ext.getCmp('resource-tree');
      if ((currentNode = (_ref = tree.getSelectionModel().getSelection()) != null ? _ref[0] : void 0) && (ref = currentNode.get('reference'))) {
        refFinder = function(node) {
          if (node.get('name') === ref && node.getDepth() === 2) {
            return true;
          }
        };
        if (target = tree.getRootNode().findChildBy(refFinder, this, true)) {
          target.expand();
          return tree.getSelectionModel().select(target);
        }
      }
    },
    hideMask: function() {
      var loading, loadingMask;
      loadingMask = Ext.get('loading-mask');
      loading = Ext.get('loading');
      loading.fadeOut({
        duration: 0.2,
        remove: true
      });
      return loadingMask.fadeOut({
        duration: 0.2,
        remove: true
      });
    }
  });

}).call(this);

/*
//@ sourceMappingURL=app.map
*/
